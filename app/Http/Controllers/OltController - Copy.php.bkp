<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DataTables;


class OltController extends Controller
{


    private $baseIndex = 268501248;

    // Slot gaps
    private $slotGaps = [
        1 => 0,
        2 => 65536,
        3 => 131072,
        4 => 196608,
        5 => 262144,
        6 => 327680,
        7 => 393216,
        8 => 458752,
        9 => 524288,
        10 => 589824,
        11 => 655360,
        12 => 720896,
        13 => 786432,
        14 => 851968,
        15 => 917504,
        16 => 983040,
        17 => 1048576,
        18 => 1114112,
        19 => 1179648,
        20 => 1245184
    ];

    public function getPonCode($id)
    {
        // Menghitung slot
        $slot = $this->findSlot($id);
        if ($slot === null) {
            return response()->json(['error' => 'Invalid ID'], 400);
        }

        // Menghitung ONU
        $onu = $this->findOnu($id, $slot);


        return '1/'.$slot.'/'.$onu;
        // return response()->json([
        //     'shelf' => 1,
        //     'slot' => $slot,
        //     'onu' => $onu
        // ]);
    }

    private function findSlot($id)
    {
        foreach ($this->slotGaps as $slot => $gap) {
            $nextSlotBase = $this->baseIndex + $gap;
            $nextSlotLimit = $nextSlotBase + 256 * 128; // 128 ONU per slot, dengan gap 256 per ONU
            
            if ($id >= $nextSlotBase && $id < $nextSlotLimit) {
                return $slot;
            }
        }
        return null; // Jika tidak menemukan slot
    }

    private function findOnu($id, $slot)
    {
        $gap = $this->slotGaps[$slot];
        $onuIndex = ($id - ($this->baseIndex + $gap));
        return ($onuIndex / 256) + 1;
    }


    //=================================================//
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
     $olt = \App\Olt::orderby('id','DESC')
     ->get();


     return view ('olt/index',['olt' =>$olt]);
 }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function table_olt_list(Request $request){


        $olt = \App\Olt::orderBy('name', 'DESC');
        $olt->get();
        return DataTables::of($olt)
        ->addIndexColumn()
        ->editColumn('name',function($olt)
        {

            return ' <a href="/olt/'.$olt->id.'" title="olt" class="badge badge-primary text-center  "> '.$olt->name. '</a>';
        })



        ->rawColumns(['DT_RowIndex','name','type','ip','port','user','password','community_ro','community_rw','snmp_port'])

        ->make(true);
    }


    public function create()
    {
        //
        return view ('olt/create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
    // Validate the request data
        $validatedData = $request->validate([
        'name' => ['required', 'string', 'max:255', 'unique:olts,name'], // Corrected the 'unique' rule to target the 'olts' table and 'name' column
        'type' => 'required|string|max:255', // Added string validation for 'type' and a maximum length
        'ip' => 'required|ip', // Added IP validation for the 'ip' field
        'port' => 'required|integer|min:1|max:65535', // Added integer validation and port range
        'user' => 'required|string|max:255', // Added string validation and max length for 'user'
        'password' => 'required|string|max:255', // Added string validation and max length for 'password'
        'community_ro' => 'required|string|max:255', // Added string validation and max length for 'community_ro'
        'community_rw' => 'required|string|max:255', // Added string validation and max length for 'community_rw'
        'snmp_port' => 'required|integer|min:1|max:65535', // Added integer validation and port range for SNMP port
    ]);

        try {
        // Create a new Olt record
            \App\Olt::create([
                'name' => $validatedData['name'],
                'type' => $validatedData['type'],
                'ip' => $validatedData['ip'],
                'port' => $validatedData['port'],
                'user' => $validatedData['user'],
                'password' => $validatedData['password'],
                'community_ro' => $validatedData['community_ro'],
                'community_rw' => $validatedData['community_rw'],
                'snmp_port' => $validatedData['snmp_port'],
            'created_at' => now(), // Use current timestamp for created_at
        ]);

            return redirect('/olt')->with('success', 'Item created successfully!');
        } catch (\Exception $e) {
        // Handle any exceptions that occur during the creation process
            return redirect()->back()->withErrors(['error' => 'An error occurred while creating the item: ' . $e->getMessage()]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // Temukan Olt berdasarkan ID
        $olt = \App\Olt::findOrFail($id);

        // Tampilkan halaman dengan informasi dasar OLT, AJAX akan mengambil detail lainnya
        return view('olt.show', ['olt' => $olt]);
    }

    public function getOltInfo($id)
    {
        try {
            // Temukan Olt berdasarkan ID atau lempar error 404 jika tidak ditemukan
            $olt = \App\Olt::findOrFail($id);

            // Ambil SNMP OID dari konfigurasi
            $zteoid = config('zteoid');
            $ontStatuses = config('zteontstatus');
            // Inisialisasi koneksi SNMP
            $snmp = new \SNMP(\SNMP::VERSION_2c, $olt->ip, $olt->community_ro);

            // OID untuk mendapatkan informasi

            $logging = 0;
            $los = 0;
            $synMib = 0;
            $working = 0;
            $dyinggasp = 0;
            $authFailed = 0;
            $offline = 0;
            $onuNameValue =0;
            $onuUncfgValue=0;



            $oidOltName = $zteoid['oidOltName'];
            $oidOltUptime = $zteoid['oidOltUptime'];
            $oidOltVersion = $zteoid['oidOltVersion'];
            $oidOltDesc = $zteoid['oidOltDesc'];
            $onuUncfgSn = $zteoid['oidOnuUncfgSn'];
            $onuName = $zteoid['oidOnuName'];
            $onuStatus = $zteoid['oidOnuStatus'];
            try
            {
             $onuUncfgValue = count($snmp->walk($onuUncfgSn));

         } catch (\Exception $e) {

         }



         $onuNameValue = $snmp->walk($onuName);
         $onuCount=count($onuNameValue);


         $processedResults = [];

         foreach ($onuNameValue as $key => $onuName) {

    // Mengambil status ONT
            $components = explode('.', $key);
            $lastTwoComponents = array_slice($components, -2);
            $result = implode('.', $lastTwoComponents);
            $oid = $onuStatus.'.'.$result;
            $statusValue = $snmp->get($oid);

    // Jika status tidak dapat diambil, lewati ONT ini
            if ($statusValue === false) 
            {
                continue;
            }

    // Mengambil status ONT dari array $ontStatuses atau 'Unknown' jika tidak ditemukan
            $result_status = $ontStatuses[$statusValue] ?? 'Unknown';

    // Jika tidak ada data status, tampilkan pesan "No data"
            if (empty($result_status)) {
                echo "No data";
            } else {
        // Memeriksa status ONT dan melakukan increment sesuai dengan status
                switch ($result_status) {
                    case "working":
                    $working++;
                    break;
                    case "los":
                    $los++;
                    break;
                    case "dyinggasp":
                    $dyinggasp++;
                    break;
                    case "logging":
                    $logging++;
                    break;

                    default:
        // Handle other cases or do nothing
                    $offline++;
                    break;
                }
            }
        }





















            // Mengambil informasi OLT melalui SNMP
        $oltInfo = [
            'oltName' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltName)),
            'oltUptime' => str_replace(['Timeticks: ', '"'], "", $snmp->get($oidOltUptime)),
            'oltVersion' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltVersion)),
            'oltDesc' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltDesc)),
            'onuUnConfg' => $onuUncfgValue,
            'onuCount' => $onuCount,
            'logging' => $logging,
            'los' => $los,
            'synMib' => $synMib,
            'working' => $working,
            'dyinggasp' => $dyinggasp,
            'authFailed' =>$authFailed,
            'offline' =>  $offline,


        ];

            // Tutup koneksi SNMP
        $snmp->close();

            // Kembalikan data dalam bentuk JSON
        return response()->json(['success' => true, 'oltInfo' => $oltInfo]);

    } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
        return response()->json(['success' => false, 'error' => 'OLT Not Found.']);
    } catch (\SNMPException $e) {
        return response()->json(['success' => false, 'error' => 'Failed to retrieve OLT information ' . $e->getMessage()]);
    } catch (\Exception $e) {
        return response()->json(['success' => false, 'error' => 'Failed to retrieve OLT information ' . $e->getMessage()]);
    }
}



public function onuRegister()
{
   $zteoid = config('zteoid');
   $onuUncfgValue = [];


   $snmp = new \SNMP(\SNMP::VERSION_2c, '202.169.255.10', 'public_ro');

   $onuUncfgSn = $zteoid['oidOnuUncfgSn'];
   try
   {
    $onuUncfgValue = $snmp->walk($onuUncfgSn);

} catch (\Exception $e) {

}

dd($onuUncfgValue);
}

public function getOltOnuPower($id)
{
    try {
            // Temukan Olt berdasarkan ID atau lempar error 404 jika tidak ditemukan
        $olt = \App\Olt::findOrFail($id);

            // Ambil SNMP OID dari konfigurasi
        $zteoid = config('zteoid');

            // Inisialisasi koneksi SNMP
        $snmp = new \SNMP(\SNMP::VERSION_2c, $olt->ip, $olt->community_ro,$olt->snmp_port);

            // OID untuk mendapatkan informasi
        $oidOltName = $zteoid['oidOltName'];
        $oidOltUptime = $zteoid['oidOltUptime'];
        $oidOltVersion = $zteoid['oidOltVersion'];
        $oidOltDesc = $zteoid['oidOltDesc'];

            // Mengambil informasi OLT melalui SNMP
        $oltInfo = [
            'oltName' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltName)),
            'oltUptime' => str_replace(['Timeticks: ', '"'], "", $snmp->get($oidOltUptime)),
            'oltVersion' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltVersion)),
            'oltDesc' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltDesc)),
        ];

            // Tutup koneksi SNMP
        $snmp->close();

            // Kembalikan data dalam bentuk JSON
        return response()->json(['success' => true, 'oltInfo' => $oltInfo]);

    } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
        return response()->json(['success' => false, 'error' => 'OLT Not Found.']);
    } catch (\SNMPException $e) {
        return response()->json(['success' => false, 'error' => 'Failed to retrieve OLT information ' . $e->getMessage()]);
    } catch (\Exception $e) {
        return response()->json(['success' => false, 'error' => 'Failed to retrieve OLT information ' . $e->getMessage()]);
    }
}



public function getOltPon($id)
{
    try {
        // Mengambil data OLT berdasarkan ID
        $olt = \App\Olt::findOrFail($id);

        // Ambil SNMP OID dari konfigurasi
        $zteoid = config('zteoid');
        $frameslotportid = config('zteframeslotportid'); // Mengambil data dari konfigurasi

        // Inisialisasi koneksi SNMP
        $snmp = new \SNMP(\SNMP::VERSION_2c, $olt->ip, $olt->community_ro);

        // OID yang digunakan untuk mengambil nama ONU
        $oidOnuName = $zteoid['oidOnuName'];

        // Mengatur waktu eksekusi maksimum
        ini_set('max_execution_time', 300);

        // Mengambil data SNMP walk
        $result = $snmp->walk($oidOnuName);

        $data = [];
        $processedSuffixes = [];

        // Memeriksa apakah hasil 'oidOnuName' ada dan memprosesnya
        if ($result) {
            foreach ($result as $key => $onuName) {
                // Memisahkan kunci OID berdasarkan titik (.)
                $parts = explode('.', $key);

                // Mengambil nilai kedua dari akhir sebagai suffix
                $suffix = $parts[count($parts) - 2];

                // Jika suffix belum diproses, maka lanjutkan
                if (!in_array($suffix, $processedSuffixes)) {
                    // Tambahkan suffix ke dalam daftar yang sudah diproses
                    $processedSuffixes[] = $suffix;

                    // Cari kunci (x/x/x) berdasarkan nilai $suffix
                    $oltPon = array_search($suffix, $frameslotportid);

                    // Masukkan data yang sudah diproses ke dalam array
                    $data[] = [
                        'olt_pon' => $oltPon, // Gantikan dengan olt_pon yang sesuai
                        'suffix' => $suffix,
                        // Tambahkan elemen lainnya yang diperlukan
                    ];
                }
            }
            $snmp->close();
        } else {
            return response()->json(['error' => 'Data OLT tidak ditemukan atau tidak tersedia.'], 500);
        }
       // dd($data);
        return response()->json(['data' => $data]);

    } catch (\Exception $e) {
        return response()->json(['error' => 'Terjadi kesalahan saat mengambil data: ' . $e->getMessage()], 500);
    }
}





public function getOltOnu(Request $request)
{
    try {
        $olt = \App\Olt::findOrFail($request->input('olt_id'));
       $oltPonIndex = $request->input('olt_pon'); // Diterima dari request

       $zteoid = config('zteoid');
       $ontStatuses = config('zteontstatus');

       $oidOnuName = $zteoid['oidOnuName'].'.'.$oltPonIndex;
       $oidOnuStatus = $zteoid['oidOnuStatus'].'.'.$oltPonIndex;
        // Mengatur waktu eksekusi maksimum
       ini_set('max_execution_time', 300);

        // Mengambil data SNMP walk
       $snmp = new \SNMP(\SNMP::VERSION_2c, $olt->ip, $olt->community_ro);
       $result = $snmp->walk($oidOnuName);

       $data = [];

        // Memeriksa apakah hasil 'oidOnuName' ada
       if (!empty($result)) {
            // Iterasi melalui hasil SNMP walk berdasarkan kunci array
        foreach ($result as $key => $onuName) {
                // Mengambil index dari hasil SNMP walk untuk digunakan dalam OID lainnya
           $parts = explode('.', $key);
           $onuId = end($parts);
           $onuDistanceValue='Unknown';
           $onUptimeValue ='Unknown';
         //$oidOnuStatusId = $oidOnuStatus.'.'.$onuId;

         //$oidRx = '.1.3.6.1.4.1.3902.1012.3.50.12.1.1.10.268501248.'.$onuId.'.1';

                // Mengambil data SNMP untuk Status dan RX Power
           $hasilStatus = $snmp->get($oidOnuStatus.'.'.$onuId);
           $result_status = $ontStatuses[$hasilStatus] ?? 'Unknown';

           $modalId=$oltPonIndex."-".$onuId;


           $onuUptime = $zteoid['oidOnuUptime'].".$oltPonIndex.$onuId";
           $rxPowerOid =$zteoid['oidOnuRxPower'].".$oltPonIndex.$onuId.1";
           $txPowerOid = $zteoid['oidOnuTxPower'].".$oltPonIndex.$onuId.1";

           $onuLastOffline = $zteoid['oidOnuLastOffline'].".$oltPonIndex.$onuId";
           $onuLastOnline = $zteoid['oidOnuLastOnline'].".$oltPonIndex.$onuId";
           $onuModel = $zteoid['oidOnuModel'].".$oltPonIndex.$onuId";
           $onuDistance = $zteoid['oidOnuDistance'].".$oltPonIndex.$onuId";
           $onuSn = $zteoid['oidOnuSn'].".$oltPonIndex.$onuId";
           $onuUptime = $zteoid['oidOnuUptime'].".$oltPonIndex.$onuId";
           $onuUptime = $zteoid['oidOnuUptime'].".$oltPonIndex.$onuId";

           $onuDistanceValue = @$snmp->get($onuDistance).'m';
           $onuModelValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuModel));
           $onuSnValue = str_replace(['Hex-STRING: ', '"'], "", @$snmp->get($onuSn));
           $onuSnAscii = $this->convertMacToAscii($onuSnValue);
           $onuLastOfflineValue =str_replace(['STRING: ', '"'], "",  @$snmp->get($onuLastOffline));
           $onuLastOnlineValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuLastOnline));
           $onUptimeValue = trim(preg_replace('/Timeticks: \(\d+\)/', '', @$snmp->get($onuUptime)));





           if (empty($result_status))
           {
              $onu_ststus= "No data";
          }
          elseif ($result_status == "los")
          {
            $onu_ststus= '<a class="badge-danger badge btn-sm p-2 ml-2 mr-2 text-white  ">'.$result_status.'</a>';
        }
        elseif ($result_status == "working")
        {

           $rxPowerValue = @$snmp->get($rxPowerOid);
           $txPowerValue = @$snmp->get($txPowerOid);


       // $oltRxPowerValue = @$snmp->get($OltRxPowerOid);



       // $onuSnValue = str_replace(['Hex-STRING: ', '"'], "", @$snmp->get($onuSn));
       // $onuSnAscii = $this->convertMacToAscii($onuSnValue);

       // $onUptimeValue = str_replace(['Timeticks:', '"'], "", @$snmp->get($onuUptime));



           $RX = explode(' ', $rxPowerValue);
           $TX = explode(' ', $txPowerValue);
           $rxPowerValue = ((int)end($RX) * 0.002) - 30;
           $txPowerValue = ((int)end($TX) * 0.002) - 30;


           if($rxPowerValue < -29)
           {
            $bg="badge-danger";
        }
        elseif ($rxPowerValue < -27) {
            $bg="badge-warning";
        } elseif($rxPowerValue < -12) {
            $bg="badge-success";
        }
        else
        {
            $bg="badge-primary"; 
        }

       // $OltRx = explode(' ', $oltRxPowerValue);
       // $oltTxPowerValue = ((int)end($OltRx) * 0.002) + 30;
        $result_status= 'Rx: '.$rxPowerValue.' | Tx: '.$txPowerValue;

        $onu_ststus= '<button id="powerButton" class="btn '.$bg.' btn-sm pb-1" data-toggle="modal" data-target="#powerModal'.$modalId.'">'.$result_status.'</button>';

       // <div class="modal fade" id="powerModal'.$modalId.'">
       // <div class="modal-dialog">
       // <div class="modal-content">
       // <div class="modal-header">
       // <h5 class="modal-title" id="powerModalLabel"><strong>Detail ONT</strong></h5>

       // </div>
       // <div class="modal-body">
       // <p id="rxPower">Ont Name : '.$onuNameValue.'</p>
       // <p id="rxPower">Ont Model : '.$onuModelValue.' </p>
       // <p id="rxPower">Ont Sn : '.$onuSnAscii.' </p>
       // <p id="rxPower">Ont Rx Power : '.$rxPowerValue.' dBm</p>
       // <p id="txPower">Ont Tx Power : '.$txPowerValue.' dBm</p>
       // <p id="txPower">Ont Cable Length  : '.$onuDistanceValue.' m </p>
       // <p id="txPower">Olt Rx Power : '.$oltTxPowerValue.' dBm</p>
       // <p id="rxPower">Onu Last Offline : '.$onuLastOfflineValue.' </p>
       // <p id="txPower">Onu Last Online : '.$onuLastOnlineValue.' </p>
       // <p id="txPower">Onu Uptime : '.$onUptimeValue.' </p>
       // </div>
       // <div class="modal-footer">
       // <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
       // </div>
       // </div>
       // </div>
       // </div>';

           // $onu_ststus='working';
    } 
    elseif ($result_status == "dyinggasp")
    {
        $onu_ststus= '<a class="badge-warning badge btn-sm p-2 ml-2 mr-2 text-white  ">'.$result_status.'</a>';
    }
    else
    {
        $onu_ststus= '<a class="badge-warning btn btn-sm  ml-2 mr-2 text-white  ">'.$result_status.'</a>';
    }



























                // Memasukkan data yang telah dibersihkan ke dalam array
    $data[] = [
        'onuId' =>$onuId,
        'name' =>str_replace('"', '', $this->cleanSnmpValue($onuName)),
             //'status' =>$this->cleanSnmpValue($hasilStatus),
        'status' =>$onu_ststus,
        'distance' =>$this->cleanSnmpValue($onuDistanceValue),
        'onuModel' =>$onuModelValue,
        'onuSn' =>$this->cleanSnmpValue($onuSnAscii),
        'onuLastOffline' =>$onuLastOfflineValue,
        'onuLastOnline' =>$onuLastOnlineValue,
        'onuUptime' =>$onUptimeValue,


           // 'rx_power' => $this->cleanSnmpValue($hasilRX),
    ];
}
$snmp->close();
} else {
    return response()->json(['error' => 'Data OLT tidak ditemukan atau tidak tersedia.'], 500);
}

return DataTables::of($data)
->addIndexColumn()
->rawColumns(['DT_RowIndex','onuId','onuSn','onuModel', 'name','status','distance','onuLastOffline','onuLastOnline','onuUptime'])
->make(true);

} catch (\Exception $e) {
    return response()->json(['error' => 'Terjadi kesalahan saat mengambil data: ' . $e->getMessage()], 500);
}
}


private function snmpWalk($host, $community, $oids)
{
    try {
        $snmp = new \SNMP(\SNMP::VERSION_2c, $host, $community);
        $result = [];

        foreach ($oids as $key => $oid) {
            $result[$key] = $snmp->walk($oid) ?: [];
        }

        $snmp->close();

        return $result;

    } catch (\Exception $e) {
        throw new \Exception('SNMP Walk failed: ' . $e->getMessage());
    }
}

private function cleanSnmpValue($value)
{
    // Membersihkan nilai dari prefiks seperti "STRING: " atau spasi ekstra
    return trim(str_replace(['STRING: ', 'INTEGER: ', 'Gauge32: '], '', $value));
}


public function coba()
{
    // Alamat host dan community
    $host = '202.169.255.10';  // Ganti dengan alamat host SNMP Anda
    $community = 'public_ro';
    $zteoid = config('zteoid');
    $onuUncfgSn = $zteoid['oidOnuUncfgSn'];
    $onuUncfgtype = $zteoid['oidOnuUncfgType'];
    $oidOltName = $zteoid['oidOltName'];
    $OltVlanId = $zteoid['oidOltVlanId'];


    try {
        // Inisialisasi SNMP
        $snmp = new \SNMP(\SNMP::VERSION_2c, $host, $community);
        
        // Panggil fungsi SNMP Walk
        $result = $snmp->walk($onuUncfgSn);
        //dd(count($result));
        // $onuName = $zteoid['oidOnuName'];
        $oltVlanId = $snmp->walk($OltVlanId);
        $vlanIdResult = [];
        foreach ($oltVlanId as $vlan => $VlanName) {
            $vlan_value = substr(strrchr($vlan, "."), 1);
            $vlan_name = str_replace(['STRING: ', '"'], "",  $VlanName);

            $vlanIdResult[] = [
                'vlanId' => $vlan_value,
                'vlanName' => $vlan_name,
            ]; 
        }
        dd($vlanIdResult);
        // dd(count($onuNameValue));
        // Periksa apakah hasilnya false
        if ($result === false) {
            \Log::warning('SNMP Walk failed: No data returned for the specified OID ' . $onuUncfgSn);
            return response()->json(['message' => 'No data returned from SNMP walk'], 404);
        }

        // Periksa apakah hasilnya kosong
        if (empty($result)) {
            \Log::info('SNMP Walk returned no results for OID ' . $onuUncfgSn);
            return response()->json(['message' => 'No data found for the specified OID'], 404);
        }

        // Iterasi melalui hasil SNMP walk
        $processedResults = [];
        foreach ($result as $key => $onuUconfg) {
            // Pisahkan OID berdasarkan titik
            $oidParts = explode('.', $key);

            // Ambil dua nilai terakhir dari OID
            $lastTwoParts = array_slice($oidParts, -2);

            // Gabungkan dua nilai terakhir dengan titik
            $identifier = implode('.', $lastTwoParts);
            $desiredValue = $oidParts[count($oidParts) - 2];
            $onuType =  str_replace(['STRING: ', '"'], "",  $snmp->get($onuUncfgtype.'.'.$identifier));
            $onuMac = str_replace(['STRING: ', '"'], "",  $onuUconfg);
            // Simpan hasil ke array
            $processedResults[] = [
                'oltName' => str_replace(['STRING: ', '"'], "", $snmp->get($oidOltName)),
                'oid' => $this->getPonCode($desiredValue),
                'identifier' =>  $this->cleanSnmpValue($onuType), // Menyimpan dua bagian terakhir
                'value' => $this->convertMacToAscii($onuMac),
            ];
        }


        // Mengembalikan hasil yang sudah diproses dalam bentuk JSON
        return response()->json($processedResults);
     //   dd($processedResults);

    } catch (\Exception $e) {
        // Tangani kesalahan jika terjadi
        \Log::error('SNMP Walk failed for OID ' . $onuUncfgSn . ': ' . $e->getMessage());
        return response()->json(['error' => 'SNMP Walk failed', 'details' => $e->getMessage()], 500);
    }
}




    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {

// Temukan Olt berdasarkan ID
        $olt = \App\Olt::findOrFail($id);
        return view ('olt/edit',['olt' =>$olt]);

    }




    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {


     $validatedData = $request->validate([
     'name' => ['required', 'string', 'max:255', 'unique:olts,name,' . $id], // Corrected the 'unique' rule to target the 'olts' table and 'name' column
     'type' => 'required|string|max:255', // Added string validation for 'type' and a maximum length
     'ip' => 'required|ip', // Added IP validation for the 'ip' field
     'port' => 'required|integer|min:1|max:65535', // Added integer validation and port range
     'user' => 'required|string|max:255', // Added string validation and max length for 'user'
     'password' => 'required|string|max:255', // Added string validation and max length for 'password'
     'community_ro' => 'required|string|max:255', // Added string validation and max length for 'community_ro'
     'community_rw' => 'required|string|max:255', // Added string validation and max length for 'community_rw'
     'snmp_port' => 'required|integer|min:1|max:65535', // Added integer validation and port range for SNMP port
 ]);

     $olt = \App\Olt::findOrFail($id);
     $olt->update([
         'name' => $request->input('name'),
         'type' => $request->input('type'),
         'ip' => $request->input('ip'),
     'port' => $request->input('port'), // Pastikan port termasuk dalam update
     'user' => $request->input('user'),
     'password' => $request->input('password'), // Pastikan password termasuk dalam update
     'community_ro' => $request->input('community_ro'), // Pastikan community_ro termasuk dalam update
     'community_rw' => $request->input('community_rw'), // Pastikan community_rw termasuk dalam update
     'snmp_port' => $request->input('snmp_port'),
 ]);

     return redirect('/olt')->with('success', 'OLT updated successfully!');
 }

 /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
 public function destroy($id)
 {
        //
 }

 public function convertMacToAscii($mac) {
     $hexArray = explode(' ', $mac); // Pisahkan pasangan heksadesimal
     $result = '';

     foreach ($hexArray as $index => $hex) {
        if ($index < 4) { // Konversi hanya 4 pasangan pertama
            $decimalValue = hexdec($hex); // Konversi heksadesimal ke desimal
            $asciiChar = chr($decimalValue); // Konversi desimal ke karakter ASCII

            // Cek jika karakter dapat dicetak
            if (ctype_print($asciiChar)) {
                $result .= $asciiChar;
            } else {
                    $result .= $hex; // Jika karakter tidak dapat dicetak, gunakan heksadesimal asli
                }
            } else {
                    $result .= $hex; // Sisanya tetap dalam bentuk asli
                }
            }

            return $result;
        }
//=================================




        public function getGponOnuIndex($selfSlotPortOnu) {
    // Split the input into main and optional parts
   // $parts = explode(':', $selfSlotPortOnu);

    // Further split the first part into shelf, slot, and ONU
            list($shelf, $slot, $onu) = explode('/', $selfSlotPortOnu);

    // The base index for gpon-onu_1/1/1
            $baseIndex = 285278465;

    // The gap when moving between slots
            $slotGaps = [
            1 => 0,    // Slot 1 has no gap
            2 => 256,  // Slot 2 starts with a gap of 256
            3 => 256 * 2,  // Slot 3 starts with a gap of 512
            4 => 256 * 3,  // Slot 4 starts with a gap of 768
            5 => 256 * 4,  // Slot 5 starts with a gap of 1024
            6 => 256 * 5,  // Slot 6 starts with a gap of 1280
            7 => 256 * 6,  // Slot 7 starts with a gap of 1536
            8 => 256 * 7,  // Slot 8 starts with a gap of 1792
            9 => 256 * 8,  // Slot 9 starts with a gap of 2048
            10 => 256 * 9, // Slot 10 starts with a gap of 2304
            11 => 256 * 10, // Slot 11 starts with a gap of 2560
            12 => 256 * 11, // Slot 12 starts with a gap of 2816
            13 => 256 * 12, // Slot 13 starts with a gap of 3072
            14 => 256 * 13, // Slot 14 starts with a gap of 3328
            15 => 256 * 14, // Slot 15 starts with a gap of 3584
            16 => 256 * 15, // Slot 16 starts with a gap of 3840
            17 => 256 * 16, // Slot 17 starts with a gap of 4096
            18 => 256 * 17, // Slot 18 starts with a gap of 4352
            19 => 256 * 18, // Slot 19 starts with a gap of 4608
            20 => 256 * 19  // Slot 20 starts with a gap of 4864
        ];

    // Calculate the index based on the slot and ONU number
        $index = $baseIndex + $slotGaps[$slot] + ($onu - 1);

    // If there is a second part (e.g., :2), use it for additional calculations if needed
        if (isset($parts[1])) {
        // Example: Apply additional logic based on the value in $parts[1] if needed
        }

        return $index;
    }









    public function ont_status(Request $request)
    {

        $olt = \App\Olt::findOrFail($request->id_olt);

            // Ambil SNMP OID dari konfigurasi
        $zteoid = config('zteoid');
        $frameSlotPortString = config('zteframeslotportid');
        $ontStatuses = config('zteontstatus');

            // Inisialisasi koneksi SNMP
        $snmp = new \SNMP(\SNMP::VERSION_2c, $olt->ip, $olt->community_ro);

        list($frameSlotPort, $ontId) = explode(":", $request->id_onu);
        $frameSlotPortId = $frameSlotPortString[$frameSlotPort] ?? 'Unknown';
        $onuName = $zteoid['oidOnuName'].".$frameSlotPortId.$ontId";
        $onuStatus = $zteoid['oidOnuStatus'].".$frameSlotPortId.$ontId";
        $onuUptime = $zteoid['oidOnuUptime'].".$frameSlotPortId.$ontId";
        $rxPowerOid =$zteoid['oidOnuRxPower'].".$frameSlotPortId.$ontId.1";
        $txPowerOid = $zteoid['oidOnuTxPower'].".$frameSlotPortId.$ontId.1";
        $onuLastOffline = $zteoid['oidOnuLastOffline'].".$frameSlotPortId.$ontId";
        $onuLastOnline = $zteoid['oidOnuLastOnline'].".$frameSlotPortId.$ontId";
        $onuModel = $zteoid['oidOnuModel'].".$frameSlotPortId.$ontId";
        $onuDistance = $zteoid['oidOnuDistance'].".$frameSlotPortId.$ontId";
        $onuSn = $zteoid['oidOnuSn'].".$frameSlotPortId.$ontId";
        $onuUptime = $zteoid['oidOnuUptime'].".$frameSlotPortId.$ontId";


        $oltRxGetId = $this->getGponOnuIndex($frameSlotPort);
        $OltRxPowerOid =$zteoid['oidOltRxPower'].".$oltRxGetId.$ontId";

        $modalId=$frameSlotPortId."-".$ontId;

        $statusValue = @$snmp->get($onuStatus);
        if ($statusValue === false) {
            //continue; // Lewati ONT jika status tidak dapat diambil
        }
        $result_status = $ontStatuses[$statusValue] ?? 'Unknown';
              //$result_status = $ontStatuses[$statusValue] ?? 'Unknown';

        if (empty($result_status))
        {
          echo "No data";
      }
      else
      {
          if ($result_status == "los")
          {
             $onuNameValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuName));
             $onuModelValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuModel));
             $onuSnValue = str_replace(['Hex-STRING: ', '"'], "", @$snmp->get($onuSn));
             $onuSnAscii = $this->convertMacToAscii($onuSnValue);
             $onuLastOfflineValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuLastOffline));
             $onuLastOnlineValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuLastOnline));
             echo '<a class="badge-danger badge btn-sm p-2 ml-2 mr-2 text-white  ">'.$result_status.'</a><div class="modal fade" id="powerModal'.$modalId.'">
             <div class="modal-dialog">
             <div class="modal-content">
             <div class="modal-header">
             <h5 class="modal-title" id="powerModalLabel"><strong>Detail ONT</strong></h5>

             </div>
             <div class="modal-body">
             <p id="rxPower">Ont Name : '.$onuNameValue.'</p>
             <p id="rxPower">Ont Model : '.$onuModelValue.' </p>
             <p id="rxPower">Ont Sn : '.$onuSnAscii.' </p>
             <p id="rxPower">Ont Rx Power : - dBm</p>
             <p id="txPower">Ont Tx Power : - dBm</p>
             <p id="txPower">Ont Cable Length  : '.$onuDistanceValue.' m </p>
             <p id="txPower">Olt Rx Power : - dBm</p>
             <p id="rxPower">Onu Last Offline : '.$onuLastOfflineValue.' </p>
             <p id="txPower">Onu Last Online : '.$onuLastOnlineValue.' </p>
             <p id="txPower">Onu Uptime : - </p>
             </div>
             <div class="modal-footer">
             <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
             </div>
             </div>
             </div>
             </div>';
         }
         elseif ($result_status == "working")
         {

             $rxPowerValue = @$snmp->get($rxPowerOid);
             $txPowerValue = @$snmp->get($txPowerOid);
             $onuDistanceValue = str_replace(['INTEGER: ', '"'], "", @$snmp->get($onuDistance));
             $oltRxPowerValue = @$snmp->get($OltRxPowerOid);

             $onuNameValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuName));
             $onuModelValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuModel));
             $onuSnValue = str_replace(['Hex-STRING: ', '"'], "", @$snmp->get($onuSn));
             $onuSnAscii = $this->convertMacToAscii($onuSnValue);
             $onuLastOfflineValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuLastOffline));
             $onuLastOnlineValue = str_replace(['STRING: ', '"'], "", @$snmp->get($onuLastOnline));
             $onUptimeValue = str_replace(['Timeticks:', '"'], "", @$snmp->get($onuUptime));

             $RX = explode(' ', $rxPowerValue);
             $TX = explode(' ', $txPowerValue);
             $rxPowerValue = ((int)end($RX) * 0.002) - 30;
             $txPowerValue = ((int)end($TX) * 0.002) - 30;
             $OltRx = explode(' ', $oltRxPowerValue);
             $oltTxPowerValue = ((int)end($OltRx) * 0.002) + 30;
             $result_status= 'Rx: '.$rxPowerValue.' | Tx: '.$txPowerValue;

             echo '<button id="powerButton" class="btn bg-success btn-sm pb-1" data-toggle="modal" data-target="#powerModal'.$modalId.'">'.$result_status.'</button>

             <div class="modal fade" id="powerModal'.$modalId.'">
             <div class="modal-dialog">
             <div class="modal-content">
             <div class="modal-header">
             <h5 class="modal-title" id="powerModalLabel"><strong>Detail ONT</strong></h5>

             </div>
             <div class="modal-body">
             <p id="rxPower">Ont Name : '.$onuNameValue.'</p>
             <p id="rxPower">Ont Model : '.$onuModelValue.' </p>
             <p id="rxPower">Ont Sn : '.$onuSnAscii.' </p>
             <p id="rxPower">Ont Rx Power : '.$rxPowerValue.' dBm</p>
             <p id="txPower">Ont Tx Power : '.$txPowerValue.' dBm</p>
             <p id="txPower">Ont Cable Length  : '.$onuDistanceValue.' m </p>
             <p id="txPower">Olt Rx Power : '.$oltTxPowerValue.' dBm</p>
             <p id="rxPower">Onu Last Offline : '.$onuLastOfflineValue.' </p>
             <p id="txPower">Onu Last Online : '.$onuLastOnlineValue.' </p>
             <p id="txPower">Onu Uptime : '.$onUptimeValue.' </p>
             </div>
             <div class="modal-footer">
             <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
             </div>
             </div>
             </div>
             </div>';
         } 
         elseif ($result_status == "dyinggasp")
         {
            echo '<a class="badge-warning badge btn-sm p-2 ml-2 mr-2 text-white  ">'.$result_status.'</a>
            <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="powerModalLabel"><strong>Detail ONT</strong></h5>

            </div>
            <div class="modal-body">
            <p id="rxPower">Ont Name : '.$onuNameValue.'</p>
            <p id="rxPower">Ont Model : '.$onuModelValue.' </p>
            <p id="rxPower">Ont Sn : '.$onuSnAscii.' </p>
            <p id="rxPower">Ont Rx Power : - dBm</p>
            <p id="txPower">Ont Tx Power : - dBm</p>
            <p id="txPower">Ont Cable Length  : '.$onuDistanceValue.' m </p>
            <p id="txPower">Olt Rx Power : - dBm</p>
            <p id="rxPower">Onu Last Offline : '.$onuLastOfflineValue.' </p>
            <p id="txPower">Onu Last Online : '.$onuLastOnlineValue.' </p>
            <p id="txPower">Onu Uptime : - </p>
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
            </div>
            </div>
            </div>';
        }
        else
        {
            echo '<a class="badge-warning btn btn-sm  ml-2 mr-2 text-white  ">'.$result_status.'</a>';
        }



    }


}





}
